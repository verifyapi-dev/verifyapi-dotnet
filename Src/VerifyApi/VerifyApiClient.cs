using Newtonsoft.Json;
using System.Net;
using System.Net.Http;
using VerifyApi.Entities;
using VerifyApi.Infrastructure;

namespace VerifyApi;

public class VerifyApiClient : IVerifyApiClient
{
    private readonly SystemNetHttpClient _httpClient;

    /// <summary>
    /// Gets the base URL for Verify API
    /// </summary>
    /// <value>Base URL for Verify API</value>
    public string ApiBaseUrl { get; }
        
    /// <summary>
    /// Gets the API key used by the client to authenticate requests
    /// </summary>
    /// <value>API key used when sending requests</value>
    public string ApiKey { get; }

    /// <summary>
    /// Default base URL for VerifyAPI
    /// </summary>
    private static string DefaultApiBaseUrl => "https://api.verifyapi.dev";

    /// <summary>
    /// Instantiates a new VerifyAPI client
    /// </summary>
    /// <param name="apiKey">API key obtained via your VerifyAPI account</param>
    /// <exception cref="ArgumentException">The API key was not supplied</exception>
    public VerifyApiClient(string apiKey)
    {
        if (string.IsNullOrEmpty(apiKey))
            throw new ArgumentException("API key is required.", nameof(apiKey));

        ApiKey = apiKey;
        ApiBaseUrl = DefaultApiBaseUrl;
        _httpClient = new SystemNetHttpClient();
    }

    /// <summary>
    /// Instantiates a new VerifyAPI client
    /// </summary>
    /// <param name="apiKey">API key obtained via your VerifyAPI account</param>
    /// <param name="apiBaseUrl">Optional base URL. If omitted, It will use <see cref="DefaultApiBaseUrl"/></param>
    /// <param name="httpClient">Optional <see cref="HttpClient" />. If omitted, it will instantiate a new instance</param>
    /// <exception cref="ArgumentException">The API key was not supplied</exception>
    public VerifyApiClient(string apiKey, string? apiBaseUrl = null, HttpClient? httpClient = null)
    {
        if (string.IsNullOrEmpty(apiKey))
            throw new ArgumentException("API key is required.", nameof(apiKey));

        ApiKey = apiKey;
        ApiBaseUrl = apiBaseUrl ?? DefaultApiBaseUrl;
        _httpClient = new SystemNetHttpClient(httpClient);
    }

    /// <summary>
    /// Initiates a new <c>Verification</c> request
    /// </summary>
    /// <param name="destination">Destination number of the request</param>
    /// <param name="channel">Channel to deliver the request</param>
    /// <returns>Verification response</returns>
    public Verification Verify(string destination, Channel channel)
    {
        return RequestAsync<Verification>(HttpMethod.Post, "/verify", new {destination, channel}).ConfigureAwait(false).GetAwaiter().GetResult();
    }

    /// <summary>
    /// Initiates a new <c>Verification</c> request asynchronously
    /// </summary>
    /// <param name="destination">Destination number of the request</param>
    /// <param name="channel">Channel to deliver the request</param>
    /// <returns>Verification response</returns>
    public virtual async Task<Verification> VerifyAsync(string destination, Channel channel)
    {
        return await RequestAsync<Verification>(HttpMethod.Post, "/verify", new { destination, channel });
    }

    /// <summary>
    /// Confirms a <c>Verification</c> request
    /// </summary>
    /// <param name="id">Original request id as generated by <see cref="VerifyAsync"/></param>
    /// <param name="code">Code supplied by the end-user</param>
    /// <returns>Confirmation status</returns>
    public Verification Confirm(string id, string code)
    {
        return RequestAsync<Verification>(HttpMethod.Post, "/confirm", new {id, code}).ConfigureAwait(false).GetAwaiter().GetResult();
    }

    /// <summary>
    /// Confirms a <c>Verification</c> request asynchronously
    /// </summary>
    /// <param name="id">Original request id as generated by <see cref="VerifyAsync"/></param>
    /// <param name="code">Code supplied by the end-user</param>
    /// <returns>Confirmation status</returns>
    public virtual async Task<Verification> ConfirmAsync(string id, string code)
    {
        return await RequestAsync<Verification>(HttpMethod.Post, "/confirm", new { id, code });
    }

    private async Task<T> RequestAsync<T>(HttpMethod method, string path, object options, CancellationToken cancellationToken = default) where T : IVerifyApiEntity
    {
        var request = new VerifyApiRequest(this, method, path, options);

        var response = await _httpClient.MakeRequestAsync(request, cancellationToken).ConfigureAwait(false);

        return ProcessResponse<T>(response);
    }

    private static T ProcessResponse<T>(VerifyApiResponse response) where T : IVerifyApiEntity
    {
        if (response.StatusCode != HttpStatusCode.OK && response.StatusCode != HttpStatusCode.Forbidden && response.StatusCode != HttpStatusCode.Conflict)
        {
            throw (int)response.StatusCode switch
            {
                400 => new VerifyApiException("HTTP 400 BadRequest: The parameters sent were not correct."),
                401 => new VerifyApiException("HTTP 401 Unauthorized: The API key supplied is invalid or has been revoked."),
                429 => new VerifyApiException("HTTP 429 Too Many Requests: You've hit our rate limits, slow down!"),
                _ => new VerifyApiException($"Unexpected response HTTP {response.StatusCode}.")
            };
        }

        T obj;
        try
        {
            obj = JsonConvert.DeserializeObject<T>(response.Content)!;
        }
        catch (JsonException ex)
        {
            throw new VerifyApiException("Could not deserialize response from API.", ex);
        }

        obj.VerifyApiResponse = response;

        return obj;
    }
}